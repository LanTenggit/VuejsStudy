@{
    Layout = null;
} 
<!DOCTYPE html>
<html>
<head>
    <title></title>
    <script src="~/Content/vue2.4.2.min.js"></script>
    <style type="text/css">
        .active {
            width: 100px;
            height: 100px;
            background: green;
        }

        #left {
            height:1000px;
            width:49%;
            border:1px solid black;
            float:left;
        
        }
        #right {
            height: 1000px;
            width: 49%;
            border: 1px solid black;
            float: right;
        }

    </style>
</head>
<body>
    <div>
        <div id="left">
            <div id="vue_det">
                <h1>site : {{site}}</h1>
                <h1>url : {{url}}</h1>
                <h1>Alexa : {{alexa}}</h1>
            </div>



            <div id="app">

                <p>{{ mess}}</p>
            </div>


            <div id="appV_IF">
                <p v-if="seen">现在你看到我了</p>
                <template v-if="ok">
                    <h1>菜鸟教程</h1>
                    <p>学的不仅是技术，更是梦想！</p>
                    <p>哈哈哈，打字辛苦啊！！！</p>
                </template>
            </div>


            <div id="app_V-model">
                <p>{{ message }}</p>
                <input v-model="message">
            </div>

            <div id="app_V-on">
                <p>{{ message }}</p>
                <button v-on:click="reverseMessage">反转字符串</button>
            </div>

            <div id="app_capitalize">
                {{ message | capitalize }}
            </div>


            <div id="app_IFelse">
                <div v-if="Math.random() > 0.5">
                    Sorry
                </div>
                <div v-else>
                    Not sorry
                </div>
            </div>



            <div id="app_counter">
                <p style="font-size:25px;">计数器: {{ counter }}</p>
                <button v-on:click="counter++" style="font-size:25px;">点我</button>
            </div>


            @*输入框绑定*@
            <div id="computed_props">
                千米 : <input type="text" v-model="kilometers">
                米 : <input type="text" v-model="meters">
            </div>
            <p id="info"></p>




            <div id="divClass">
                <div v-bind:class="{ 'active': isActive }"></div>
            </div>


            <div id="pingjie">
                <div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }">Vue练习</div>
            </div>



        </div>
        <div id="right">

            <div id="appGreet">
                <!-- `greet` 是在下面定义的方法名 -->
                <button v-on:click="greet">Greet</button>
            </div>

            <div id="appSay">
                <button v-on:click="say('hi')">Say hi</button>
                <button v-on:click="say('what')">Say what</button>
            </div>
            <div id="Buttonapp">
                <p>单个复选框：</p>
                <input type="checkbox" id="checkbox" v-model="checked">
                <label for="checkbox">{{ checked }}</label>

                <p>多个复选框：</p>
                <input type="checkbox" id="runoob" value="Runoob" v-model="checkedNames">
                <label for="runoob">Runoob</label>
                <input type="checkbox" id="google" value="Google" v-model="checkedNames">
                <label for="google">Google</label>
                <input type="checkbox" id="taobao" value="Taobao" v-model="checkedNames">
                <label for="taobao">taobao</label>
                <br>
                <span>选择的值为: {{ checkedNames }}</span>
            </div>


            <div id="radiobutton">
                <input type="radio" id="runoob" value="Runoob" v-model="picked">
                <label for="runoob">Runoob</label>
                <br>
                <input type="radio" id="google" value="Google" v-model="picked">
                <label for="google">Google</label>
                <br>
                <span>选中值为: {{ picked }}</span>
            </div>

            @*自定义标签*@
            <div id="runoobbiao">
                <runoob></runoob>
            </div>


        </div>
    </div>
 

    <script type="text/javascript">

 
      

        // 我们的数据对象
        var data = { site: "菜鸟教程", url: "www.runoob.com", alexa: 10000 }
        var vm = new Vue({
            el: '#vue_det',
            data: data
        })
        // 它们引用相同的对象！
        //document.write(vm.site === data.site) // true
        //document.write("<br>")
        //// 设置属性也会影响到原始数据
        //vm.site = "Runoob"
        //document.write(data.site + "<br>") // Runoob

        //// ……反之亦然
        //data.alexa = 1234
        //document.write(vm.alexa) // 1234



        var vueap = new Vue({
            el: '#app',
            data: {mess:'1245测试·'},



        })
        ///通过v-if控制是否显示
        new Vue({
            el: '#appV_IF',
            data: {
                seen: true,
                ok: true
            }
        })
        //输入框事件绑定
        new Vue({
            el: '#app_V-model',
            data: {
                message: 'Runoob!'
            }
        })
        ///点击事件
        new Vue({
            el: '#app_V-on',
            data: {
                message: 'Runoob!'
            },
            methods: {
                reverseMessage: function () {
                    this.message = this.message.split('').reverse().join('')
                }
            }
        })

        ///筛选器
        new Vue({
            el: '#app_capitalize',
            data: {
                message: 'wrewoob'
            },
            filters: {
                capitalize: function (value) {
                    if (!value) return ''
                    value = value.toString()
                    return value.charAt(0).toUpperCase() + value.slice(1)
                }
            }
        })
        ///V_IF_else属性加判断
        new Vue({
            el: '#app_IFelse'
        })

       // v-show 属性 显示或取消

        //计数器
        var vm = new Vue({
            el: '#app_counter',
            data: {
                counter: 1
            }
        });
        vm.$watch('counter', function (nval, oval) {
            alert('计数器值的变化 :' + oval + ' 变为 ' + nval + '!');
        });

        ///输入框绑定
        var vm = new Vue({
            el: '#computed_props',
            data: {
                kilometers: 0,
                meters: 0
            },
            methods: {
            },
            computed: {
            },
            watch: {
                kilometers: function (val) {
                    this.kilometers = val;
                    this.meters = this.kilometers * 1000
                },
                meters: function (val) {
                    this.kilometers = val / 1000;
                    this.meters = val;
                }
            }
        });
        // $watch 是一个实例方法
        vm.$watch('kilometers', function (newValue, oldValue) {
            // 这个回调将在 vm.kilometers 改变后调用
            document.getElementById("info").innerHTML = "修改前值为: " + oldValue + "，修改后值为: " + newValue;
        })
        ///改变样式
        new Vue({
            el: '#divClass',
            data: {
                isActive: true
            }
        })

        ///拼接style
        new Vue({
            el: '#pingjie',
            data: {
                activeColor: 'green',
                fontSize: 30
            }
        })

        var app = new Vue({
            el: '#appGreet',
            data: {
                name: 'Vue.js'
            },
            // 在 `methods` 对象中定义方法
            methods: {
                greet: function (event) {
                    // `this` 在方法里指当前 Vue 实例
                    alert('Hello ' + this.name + '!')
                    // `event` 是原生 DOM 事件
                    if (event) {
                        alert(event.target.tagName)
                    }
                }
            }
        })
        // 也可以用 JavaScript 直接调用方法
        app.greet() // -> 'Hello Vue.js!'


    </script>

    <script type="text/javascript">

        new Vue({
            el: '#appSay',
            methods: {
                say: function (message) {
                    alert(message)
                }
            }
        })


        new Vue({
            el: '#Buttonapp',
            data: {
                checked: false,
                checkedNames: []
            }
        })

        new Vue({
            el: '#radiobutton',
            data: {
                picked: 'Runoob'
            }
        })

        Vue.component('runoob', {
            template: '<a href="#">自定义组件!</a>'
        })
        // 创建根实例
        new Vue({
            el: '#runoobbiao'
        })

    </script>

</body>


</html>
